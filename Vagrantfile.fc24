#g -*- mode: ruby -*-
#g vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "fedora/24-cloud-base"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
##  config.vm.network "forwarded_port", guest: 8993, host: 8993

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
##  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Customize the amount of memory on the VM:
    vb.memory = "4096"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Install dependencies
  config.vm.provision "shell", inline: <<-SHELL
      dnf -y -q update
      dnf -y -q upgrade

	#dnf -y install kernel-devel-4.8.14-200.fc24.x86_64
	dnf -y install make
	dnf -y install vim

	dnf -y install wget
	cd /opt
	wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u111-b14/jdk-8u111-linux-x64.tar.gz"
	tar xzf jdk-8u111-linux-x64.tar.gz
	cd /opt/jdk1.8.0_111/
	alternatives --install /usr/bin/java java /opt/jdk1.8.0_111/bin/java 2
	alternatives --config java
	alternatives --install /usr/bin/jar jar /opt/jdk1.8.0_111/bin/jar 2
	alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_111/bin/javac 2
	alternatives --set jar /opt/jdk1.8.0_111/bin/jar
	alternatives --set javac /opt/jdk1.8.0_111/bin/javac
	export JAVA_HOME=/opt/jdk1.8.0_111

	dnf -y update
	cd /opt
	wget -c http://download.virtualbox.org/virtualbox/4.2.8/VBoxGuestAdditions_4.2.8.iso -O VBoxGuestAdditions_4.2.8.iso
	mount VBoxGuestAdditions_4.2.8.iso -o loop /mnt
	cd /mnt
	sh VBoxLinuxAdditions.run --nox11
	cd /opt
	rm *.iso
	etc/init.d/vboxadd setup
	chkconfig --add vboxadd
	chkconfig vboxadd on

      #add-apt-repository ppa:webupd8team/java
      #apt-get -y -q update
      #echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-gelections
      #apt-get -y -q install oracle-java8-installer
      #update-java-alternatives -s java-8-oracle
  SHELL
  
  config.vm.provision "shell",
    privileged: false,
    inline: <<-SHELL
    #/vagrant/scripts/install_solr.sh
  SHELL
  
end
